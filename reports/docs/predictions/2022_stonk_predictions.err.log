Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
df = pd.read_csv("static_2019_to_now_boc_rates.csv")
last_date_in_csv = "2022-09-20"
first_hike = "2022-10-26"
base_rate = 3.25;
second_hike = "2022-12-07"
last_hike = "2023-01-26"

# list of objects, start, end, rate
future_date = "2023-11-25"
# create loop for this in the future
df['Date'] = pd.to_datetime(df['Date'])
to_first_hike = pd.DataFrame({'Date': pd.date_range(start=last_date_in_csv, end=first_hike,closed='left'), 'V39079': base_rate})

df.append(to_first_hike)
new_df = pd.concat([df, to_first_hike])
base_rate = base_rate + 0.75
to_second_hike = pd.DataFrame({'Date': pd.date_range(start=first_hike, end=second_hike,closed='left'), 'V39079': base_rate})

# have to draw rolling average with plot
new_df = pd.concat([new_df, to_second_hike])
base_rate = base_rate + 0.25
to_third_hike = pd.DataFrame({'Date': pd.date_range(start=second_hike, end=last_hike), 'V39079': base_rate})
new_df = pd.concat([new_df, to_third_hike])

to_future = pd.DataFrame({'Date': pd.date_range(start=last_hike, end=future_date), 'V39079': base_rate})
new_df = pd.concat([new_df, to_future])
to_future = pd.DataFrame({'Date': pd.date_range(start=future_date, end="2024-05-05"), 'V39079': base_rate-0.75})
new_df = pd.concat([new_df, to_future])
new_df = new_df[pd.to_numeric(new_df['V39079'], errors='coerce').notnull()]
# drop duplicates based on date
new_df = new_df.drop_duplicates()
# drop all zero entries

new_df["Rates"] = pd.to_numeric(new_df["V39079"])
new_df= new_df[new_df['Rates'] != 0]
# sort by Date
new_df.sort_values(by='Date', inplace=True)
# plot rolling average
new_df['MA'] = new_df["Rates"].rolling(600, min_periods=1).mean()
new_df.plot("Date", "Rates")
new_df.plot("Date", "MA")
print(new_df)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[7], line 13[0m
[1;32m     11[0m [38;5;66;03m# create loop for this in the future[39;00m
[1;32m     12[0m df[[38;5;124m'[39m[38;5;124mDate[39m[38;5;124m'[39m] [38;5;241m=[39m pd[38;5;241m.[39mto_datetime(df[[38;5;124m'[39m[38;5;124mDate[39m[38;5;124m'[39m])
[0;32m---> 13[0m to_first_hike [38;5;241m=[39m pd[38;5;241m.[39mDataFrame({[38;5;124m'[39m[38;5;124mDate[39m[38;5;124m'[39m: [43mpd[49m[38;5;241;43m.[39;49m[43mdate_range[49m[43m([49m[43mstart[49m[38;5;241;43m=[39;49m[43mlast_date_in_csv[49m[43m,[49m[43m [49m[43mend[49m[38;5;241;43m=[39;49m[43mfirst_hike[49m[43m,[49m[43mclosed[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mleft[39;49m[38;5;124;43m'[39;49m[43m)[49m, [38;5;124m'[39m[38;5;124mV39079[39m[38;5;124m'[39m: base_rate})
[1;32m     15[0m df[38;5;241m.[39mappend(to_first_hike)
[1;32m     16[0m new_df [38;5;241m=[39m pd[38;5;241m.[39mconcat([df, to_first_hike])

File [0;32m/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/pandas/core/indexes/datetimes.py:945[0m, in [0;36mdate_range[0;34m(start, end, periods, freq, tz, normalize, name, inclusive, unit, **kwargs)[0m
[1;32m    942[0m [38;5;28;01mif[39;00m freq [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m com[38;5;241m.[39many_none(periods, start, end):
[1;32m    943[0m     freq [38;5;241m=[39m [38;5;124m"[39m[38;5;124mD[39m[38;5;124m"[39m
[0;32m--> 945[0m dtarr [38;5;241m=[39m [43mDatetimeArray[49m[38;5;241;43m.[39;49m[43m_generate_range[49m[43m([49m
[1;32m    946[0m [43m    [49m[43mstart[49m[38;5;241;43m=[39;49m[43mstart[49m[43m,[49m
[1;32m    947[0m [43m    [49m[43mend[49m[38;5;241;43m=[39;49m[43mend[49m[43m,[49m
[1;32m    948[0m [43m    [49m[43mperiods[49m[38;5;241;43m=[39;49m[43mperiods[49m[43m,[49m
[1;32m    949[0m [43m    [49m[43mfreq[49m[38;5;241;43m=[39;49m[43mfreq[49m[43m,[49m
[1;32m    950[0m [43m    [49m[43mtz[49m[38;5;241;43m=[39;49m[43mtz[49m[43m,[49m
[1;32m    951[0m [43m    [49m[43mnormalize[49m[38;5;241;43m=[39;49m[43mnormalize[49m[43m,[49m
[1;32m    952[0m [43m    [49m[43minclusive[49m[38;5;241;43m=[39;49m[43minclusive[49m[43m,[49m
[1;32m    953[0m [43m    [49m[43munit[49m[38;5;241;43m=[39;49m[43munit[49m[43m,[49m
[1;32m    954[0m [43m    [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m,[49m
[1;32m    955[0m [43m[49m[43m)[49m
[1;32m    956[0m [38;5;28;01mreturn[39;00m DatetimeIndex[38;5;241m.[39m_simple_new(dtarr, name[38;5;241m=[39mname)

[0;31mTypeError[0m: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'
TypeError: DatetimeArray._generate_range() got an unexpected keyword argument 'closed'

