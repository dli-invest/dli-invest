Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import yfinance as yf
import mplfinance as mpf
sp = yf.Ticker("MBCF")
# Consider grabbing for valid date index instead
daily = sp.history(start="2016-01-02")
mpf.plot(daily,type='line')

last_year = sp.history(start="2021-03-14")
mpf.plot(last_year,type='candle',mav=(50, 100),volume=True)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn [4], line 6[0m
[1;32m      4[0m [38;5;66;03m# Consider grabbing for valid date index instead[39;00m
[1;32m      5[0m daily [38;5;241m=[39m sp[38;5;241m.[39mhistory(start[38;5;241m=[39m[38;5;124m"[39m[38;5;124m2016-01-02[39m[38;5;124m"[39m)
[0;32m----> 6[0m [43mmpf[49m[38;5;241;43m.[39;49m[43mplot[49m[43m([49m[43mdaily[49m[43m,[49m[38;5;28;43mtype[39;49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mline[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m      8[0m last_year [38;5;241m=[39m sp[38;5;241m.[39mhistory(start[38;5;241m=[39m[38;5;124m"[39m[38;5;124m2021-03-14[39m[38;5;124m"[39m)
[1;32m      9[0m mpf[38;5;241m.[39mplot(last_year,[38;5;28mtype[39m[38;5;241m=[39m[38;5;124m'[39m[38;5;124mcandle[39m[38;5;124m'[39m,mav[38;5;241m=[39m([38;5;241m50[39m, [38;5;241m100[39m),volume[38;5;241m=[39m[38;5;28;01mTrue[39;00m)

File [0;32m/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/mplfinance/plotting.py:416[0m, in [0;36mplot[0;34m(data, **kwargs)[0m
[1;32m    413[0m [38;5;66;03m# translate alias types:[39;00m
[1;32m    414[0m config[[38;5;124m'[39m[38;5;124mtype[39m[38;5;124m'[39m] [38;5;241m=[39m _get_valid_plot_types(config[[38;5;124m'[39m[38;5;124mtype[39m[38;5;124m'[39m])
[0;32m--> 416[0m dates,opens,highs,lows,closes,volumes [38;5;241m=[39m [43m_check_and_prepare_data[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mconfig[49m[43m)[49m
[1;32m    418[0m config[[38;5;124m'[39m[38;5;124mxlim[39m[38;5;124m'[39m] [38;5;241m=[39m _check_and_convert_xlim_configuration(data, config)
[1;32m    420[0m [38;5;28;01mif[39;00m config[[38;5;124m'[39m[38;5;124mtype[39m[38;5;124m'[39m] [38;5;129;01min[39;00m VALID_PMOVE_TYPES [38;5;129;01mand[39;00m config[[38;5;124m'[39m[38;5;124maddplot[39m[38;5;124m'[39m] [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m/opt/hostedtoolcache/Python/3.10.8/x64/lib/python3.10/site-packages/mplfinance/_arg_validators.py:31[0m, in [0;36m_check_and_prepare_data[0;34m(data, config)[0m
[1;32m     28[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124m'[39m[38;5;124mExpect data as DataFrame[39m[38;5;124m'[39m)
[1;32m     30[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(data[38;5;241m.[39mindex,pd[38;5;241m.[39mcore[38;5;241m.[39mindexes[38;5;241m.[39mdatetimes[38;5;241m.[39mDatetimeIndex):
[0;32m---> 31[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m([38;5;124m'[39m[38;5;124mExpect data.index as DatetimeIndex[39m[38;5;124m'[39m)
[1;32m     33[0m [38;5;66;03m# We will not be fully case-insensitive (since Pandas columns as NOT case-insensitive)[39;00m
[1;32m     34[0m [38;5;66;03m# but because so many people have requested it, for the default column names we will[39;00m
[1;32m     35[0m [38;5;66;03m# try both Capitalized and lower case:[39;00m
[1;32m     36[0m columns [38;5;241m=[39m config[[38;5;124m'[39m[38;5;124mcolumns[39m[38;5;124m'[39m]

[0;31mTypeError[0m: Expect data.index as DatetimeIndex
TypeError: Expect data.index as DatetimeIndex

